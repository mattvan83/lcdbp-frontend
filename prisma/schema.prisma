generator nextAdmin {
  provider = "next-admin-generator-prisma"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model contacts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int      @map("__v") @default(0)
  createdAt DateTime @db.Date @default(now())
  email     String
  firstname String
  lastname  String
  message   String
  ownCopy   Boolean
  phone     String?
  updatedAt DateTime @db.Date @updatedAt
}

model events {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int      @map("__v") @default(0)
  chores               String[]
  city                 String
  createdAt            DateTime @db.Date @default(now())
  eventDate            DateTime @db.Date
  place                String
  postalCode           String
  price                String
  thumbnailDescription String
  thumbnailUrl         String
  title                String
  updatedAt            DateTime @db.Date @updatedAt
}

model listenings {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int      @map("__v") @default(0)
  arrangement          String?
  harmonization        String?
  artwork              String?
  audioUrl             String
  authorMusic          String
  authorText           String?
  createdAt            DateTime @db.Date @default(now())
  lastListening        Boolean
  recordingDate        DateTime @db.Date
  thumbnailDescription String
  thumbnailUrl         String
  title                String
  updatedAt            DateTime @db.Date @updatedAt
}

model pressreviews {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int      @map("__v") @default(0)
  city                 String
  createdAt            DateTime @db.Date @default(now())
  journal              String
  lastPressReview      Boolean
  pressReviewDate      DateTime @db.Date
  thumbnailDescription String
  thumbnailUrl         String
  title                String
  updatedAt            DateTime @db.Date @updatedAt
}

enum Voice {
  B1
  B2
  T1
  T2
}

enum Type {
  admin
  user
}

model users {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  v            Int      @map("__v") @default(0)
  address      String
  birthDate    DateTime @db.Date
  city         String
  createdAt    DateTime @db.Date @default(now())
  email        String   @unique
  firstname    String
  incomingDate DateTime @db.Date
  lastname     String
  mobile       String?
  password     String?
  phone        String?
  postalCode   String
  token        String?
  type         Type     @default(user)
  updatedAt    DateTime @db.Date @updatedAt
  username     String?
  voice        Voice
}

enum VoiceType {
  BARYTON
  BASS
  TENOR1
  TENOR2
  TUTTI
}

model Recording {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  v                   Int      @map("__v") @default(0)
  recordingUrl        String
  recordingDescription String
  voiceType          VoiceType
  work               Work      @relation(fields: [workId], references: [id])
  workId             String    @db.ObjectId
  createdAt          DateTime  @db.Date @default(now())
  updatedAt          DateTime  @db.Date @updatedAt

  @@map("recordings")
}

model Work {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  v                     Int        @map("__v") @default(0)
  title                 String
  code                  String
  artwork               String?
  partitionUrl          String
  partitionThumbnailUrl String?
  authorMusic           String?
  isAtWork             Boolean    @default(false)
  recordings           Recording[]
  createdAt            DateTime   @db.Date @default(now())
  updatedAt            DateTime   @db.Date @updatedAt

  @@map("works")
}

model News {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  v                    Int        @map("__v") @default(0)
  thumbnailDescription String
  thumbnailUrl         String
  newsDate             DateTime @db.Date
  createdAt            DateTime   @db.Date @default(now())
  updatedAt            DateTime   @db.Date @updatedAt

  @@map("news")
}
